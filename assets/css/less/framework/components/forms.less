#forms { .init(@_unitSpace,
               @_inputWidthFull: 200px,
               @_inputHeightFull: 30px,
               @_textColor,
               @_inputBorderColor,
               @_errorColor,
               @_successColor,
               @_disabledColor,
               @_round,
               @_reqLabelColor: red) {
// -----------------------------------------
/* КЛАССЫ ФОРМЫ */
//------------------------------------------

// class name variables --------------------
@-fieldset: -fieldset;
@-form-line: -form-line; // контейнер для горизонтальной формы
  @-form-line_left: -form-line_left; // левая часть группы
  // <label class="-label -form-line_left" for="">...</label>
  @-form-line_right: -form-line_right; // правая часть группы
  // <div class="-form-line">
  //   <label for="" class="-label -form-line_left">...</label>
  //   <div class="-form-line_right">
  //     <input type="text" name="" />
  //   </div>
  // </div>
@-form-inline-group: -form-inline-group; // группа элементов формы с правым отступом равным одному микромодулю
// <span class="-form-group-line">...</span>
//
@-label: -label; // подпись для элемента поля вертикальной конфигурации
// <label class="-label" for="" >*</label>
@-label-inline: -label-inline; // подпись для элемента поля вытянутого в строку
// <label class="-label-inline" for="" >*</label>
@-label--required: -label--required; // звездочка обязательного поля
// <label class="-label -label--required" for="" >*</label>
//
@-form-note: -form-note; // подсказака для инпута
// <input type="text" class="-input-text" name="" /> <span class="-form-note">*</span>
//
@-form-note--error: -form-note--error; // модификатор подсказки ошибки
@-form-note--success: -form-note--success; // модификатор подсказки успеха
//
@-form-note-inline: -form-note-inline; // подсказака для инпута в строку
// <input type="text" class="-input-text" name="" /> <span class="-form-note-inline">пример подсказки</span>
//
@-input-text: -input-text; // текстовый инпут
// <input type="text" class="-input-text" name="" />
//
@-input--success: -input--success; // модификатор успеха
@-input--error: -input--error; // модификатор ошибки
@-input--disabled: -input--disabled; // модификатор недоступного поля
// <input type="text" class="-input-text -input--error" name="" />
//
@-select: -select; // селект
// <select class="-select" name="">*</select>
//
@-textarea: -textarea; // текстэреа
// <textarea class="-textarea">*</textarea>
//
@-input-file: -input-file; // поле для загрузки файла
// <input type="file" class="-input-file" name="" />
//
@-fake-input: -fake-input; // элемент со стилем текстового инпута
// <span class="-fake-input" />
//
@-letters: -letters; // ширина тесктового инпута по величине букв(2-10, 12, 16)
// <input type="text" class="-input-text -letters2" />
//
@-width33: -width33; // разная ширина элементов выстоенных по горизонтали
@-width50: -width50;
@-width100: -width100;
// <input type="text" class="-input-text -width33" />
//
@-chosen: -chosen; // контейнер для checkbox и radio
@-chosen_label: -chosen_label; // подпись для checkbox и radio
@-chosen_label--inline: -chosen_label--inline; // подпись для checkbox и radio при строковой форме
// <label class="-chosen_label -chosen_label--inline"><input type="checkbox" class="-chosen_input" name="rr1" /> Check me out</label>
@-chosen_input: -chosen_input;
// <div class="-chosen">
//   <label class="-chosen_label"><input type="checkbox" class="-chosen_input" name="rr1" /> Check me out</label>
// </div>
//
@-form-action: -form-action; // плашка с кнопками формы
// <div class="-form-action">
//   <button type="submit" class="-btn">Sign in</button>
// </div>
//
@-label--spacer: -label--spacer; // корректировака лебла по высоте при появлении группы инлайн инпутов в правой части формы
// <div class="-form-line">
//   <div class="-form-line_left">
//     <label class="-label -label--spacer" for="" >*</label>
//   </div>
//   <div class="-form-line_right">*</div>
// </div>
//

@-chosen-custom: -chosen_custom;
@-select_custom-wrap: -select_custom-wrap;
@-select_custom: -select_custom;
@-input-file_custom: -input-file_custom;

@-input-shake: -input-shake;
@-input-note-error: -input-note-error;

@-form-errors: -form-errors;
  @-form-errors_title: -form-errors_title;
  @-form-errors_list: -form-errors_list;
    @-form-errors_list_item: -form-errors_list_item;
// -----------------------------------------

// local variables and mixins --------------
@_inputPaddingLeftRight: 5px;
@_inputPaddingTop: 4px;
@_inputPaddingBottom: 4px;
@_inputPadding: @_inputPaddingTop @_inputPaddingLeftRight @_inputPaddingBottom;
@_inputBorderThin: 1;

@_unitSpaceHalf: ceil((@_unitSpace / 2));

@_inputHeight: (@_inputHeightFull - @_inputPaddingTop - @_inputPaddingBottom - 2 * @_inputBorderThin);
@_inputWidth: (@_inputWidthFull - 2 * @_inputBorderThin - 2 * @_inputPaddingLeftRight);

@_hue: hue(@_inputBorderColor);
@_disabledHue: hue(@_disabledColor);
@_inputBorderColorFocus: hsl(@_hue, 50%, 50%);
// стиль инпутов
.inputNormal() {
  @borderColor: hsl(@_hue, 7%, 65%);

  .border(@borderColor);
  border-top: 1px solid darken(@borderColor, 10%);
  .round(@_round);

  @sh: inset 0 1px 2px hsl(@_hue, 1%, 75%),
             0 1px 0px #FFF;
  .shadow(@sh);

  .grad(hsl(@_hue, 1%, 96%), 3%);
}

.inputFocus(@borderColor) {
  background-color: #FFF;
  .border(@borderColor);

  @hue: hue(@borderColor);
  @sh:       0 0 0 2px hsl(@hue, 70%, 80%),
  inset 0 1px 2px hsl(@hue, 10%, 70%);
  .shadow(@sh);

  outline: none;
}
.inputDisabled() {
  background: hsl(@_disabledHue, 30%, 96%);
  .shadow(0 1px 0px #FFF);
  .border(hsl(@_disabledHue, 7%, 80%));
}
// -----------------------------------------

// COMPONENT STYLE -------------------------
.@{-fieldset} {
  margin: 0 0 @_unitSpace 0;
  padding: @_unitSpaceHalf (@_unitSpaceHalf - 1) (@_unitSpaceHalf - 1);
}
.@{-form-line} {
  .clearfix();
  margin-bottom: @_unitSpace;
}
.@{-form-inline-group} {
  display: inline-block;
  margin-right: @_unitSpace;
}
.@{-label} {
  display: block;
  width: @_inputWidth;
}
.@{-label-inline} {
  display: inline-block;
  font-weight: bold;
  padding-top: (@_inputPaddingTop + @_inputBorderThin);
}
.@{-label--required}:after {
  content: "*";
  font-weight: normal;
  color:@_reqLabelColor;
  padding-left: .15em;
}
.@{-form-note} {
  display: block;
}
.@{-form-note-inline} {
  display: inline-block;
  padding-top: (@_inputPaddingTop + @_inputBorderThin);
}
.@{-input-text},
.@{-select},
.@{-textarea},
.@{-input-file},
.@{-fake-input} {
  padding: @_inputPadding;
  .border(@_inputBorderColor);
  vertical-align: top;
  line-height: @_inputHeight;
}
.@{-input-file} {

}
.@{-input-text} {
  height: @_inputHeight;
}
.@{-input-text},
.@{-textarea},
.@{-fake-input} {
  width: (@_inputWidth - 2);
}
.@{-input-file} {
  width: @_inputWidthFull;
}
.@{-fake-input} {
  display: inline-block;
  background-color: #FFF;
  height: @_inputHeight;
  overflow: hidden;
}
.@{-input--error} {
  border-color: @_errorColor;
}
.@{-input--success} {
  border-color: @_successColor;
}
.@{-input--disabled} {
  border-color: @_disabledColor;
}
.@{-select} {
  height: @_inputHeightFull;
  & option {
    padding: @_inputPadding;
  }
}
.@{-textarea} {
  line-height: @_unitSpace;
  padding: @_inputPadding;
  min-height: (4 * @_unitSpace); // - @_inputCorrect;
}
// checkbox and radiobuttom
.@{-chosen} {
  min-height: @_unitSpace;
  padding-left: @_unitSpace;
}
.@{-chosen_label} {
  font-weight: normal;
  cursor: pointer;
  display: inline;
  & [disabled] {
    cursor: default;
  }
}
.@{-chosen_label--inline} {
  margin-right: 1em;
  & input {
    float: none;
    margin: 0;
  }
}
.@{-chosen_input} {
  cursor: pointer;
  float: left;
  margin: 4px 4px 0 -@_unitSpace;
  &:disabled {
    cursor: default;
  }
  /*&[disabled] {
    border: none;
  }*/
}
// -----------------------------------------

// MODULES ---------------------------------
// длины инпутов
.Input-sizes(@oneLetterWidth: 8px) {
  .@{-letters}2 { width: (2 * @oneLetterWidth); }
  .@{-letters}3 { width: (3 * @oneLetterWidth); }
  .@{-letters}4 { width: (4 * @oneLetterWidth); }
  .@{-letters}5 { width: (5 * @oneLetterWidth); }
  .@{-letters}6 { width: (6 * @oneLetterWidth); }
  .@{-letters}7 { width: (7 * @oneLetterWidth); }
  .@{-letters}8 { width: (8 * @oneLetterWidth); }
  .@{-letters}9 { width: (9 * @oneLetterWidth); }
  .@{-letters}10 { width: (10 * @oneLetterWidth); }
  .@{-letters}12 { width: (12 * @oneLetterWidth); }
  .@{-letters}16 { width: (16 * @oneLetterWidth); }
  .@{-width33},
  .@{-width50},
  .@{-width100} {
    .box-sizing(border-box);
  }
  .@{-width33} {
    width: 33.33%;
  }
  .@{-width50} {
    width: 50%;
  }
  .@{-width100} {
    width: 100%;
  }
  .@{-width100},
  .@{-width50},
  .@{-width33} {
    height: @_inputHeightFull;
  }
  textarea.@{-width100},
  textarea.@{-width50},
  textarea.@{-width33} {
    min-height: (4 * @_unitSpace + @_inputPaddingTop + @_inputPaddingBottom + 2 * @_inputBorderThin);
    height: auto;
  }
} // END Input-sizes

// горизонтальная форма
.Form-horizont(@leftWidth: 100px, @leftRightSpacer) {
  .@{-form-line_left} {
    float: left;
    padding-top: @_inputPaddingTop;
    text-align: left;
    width: @leftWidth;
  }
  .@{-form-line_right} {
    margin-left: (@leftWidth + @leftRightSpacer);
  }
  .@{-label--spacer} {
    margin-top: @_unitSpace;
  }
} // END Form-horizont()

// дизайн инпутов
.Input-style() {
  .@{-form-note},
  .@{-form-note-inline} {
    color: hsl(@_hue, 7%, 45%);
  }
  .@{-input-text},
  .@{-select},
  .@{-textarea},
  .@{-fake-input} {
    color:@_textColor;
    .inputNormal();
    &:focus {
      .inputFocus(@_inputBorderColorFocus);
    }
  }
  input:-moz-placeholder,
  textarea:-moz-placeholder {
    color: hsl(@_hue, 7%, 63%);
  }
  input:-ms-input-placeholder,
  textarea:-ms-input-placeholder {
    color: hsl(@_hue, 7%, 63%);
  }

  .@{-input--success} {
    .inputFocus(@_successColor);
  }
  .@{-form-note--success} {
    color: @_successColor;
  }
  .@{-input--disabled} {
    .inputDisabled();
  }

  // подвал формы
  .@{-form-action} {
    @color: hsl(32, 7%, 88%);

    padding: @_unitSpaceHalf;
    margin-top: @_unitSpace;
    background-color: @color;
    .round-bottom-left( (2 * @_round) );
    .round-bottom-right( (2 * @_round) );
    border-top: 1px solid darken(@color, 10%);
    border-bottom: 1px solid #FFF;
    @sh: inset 0 0px 1px darken(@color, 15%);
    .shadow(@sh);
  }
} // END .input-style()

// ошибки инпутов
.Inputs-errors(@fontSizeTitleErrors) {
  @errorHue: hue(@_errorColor);
  .errorStyle(@errorColor) {
    @errorHue: hue(@errorColor);
    color: hsl(@errorHue, 55%, 30%);
    .border(hsl(@errorHue, 60%, 50%));
    .round(@_round);
    @sh: inset 0px 0px 4px hsl(@errorHue, 65%, 93%),
         inset 0px 1px 0px hsl(@errorHue, 65%, 95%),
         inset 1px 0px 0px hsl(@errorHue, 65%, 90%),
         inset -1px 0px 0px hsl(@errorHue, 65%, 90%),
               0 1px 2px hsl(@errorHue, 40%, 70%);
    .shadow(@sh);
    background-color: hsl(@errorHue, 45%, 80%);
  }

  .@{-input--error} {
    .inputFocus(@_errorColor);
  }
  .@{-form-note--error} {
    color: @_errorColor;
  }

  #animation > .fadeInRight(); // назначаем анимацию показа ошибки

  .@{-input-note-error} {
    font-size: 13px;
    display: inline-block;
    max-width: (10 * @_unitSpace);
    min-width: (5 * @_unitSpace);
    position: absolute;
    padding: @_inputPadding;
    margin-left: @_unitSpaceHalf;
    line-height: 17px;
    .errorStyle(@_errorColor);
    &:before {
      content: ''; // TODO проверить свойства
      display: block;
      position: absolute;
      left: 0px;
      margin-left: -13px;
      top: 6px;
      .triangle(left, 6px, hsl(@errorHue, 60%, 50%));
    }
    .animation(fadeInRight, .75s, .8s, ease-in);
  }
  .@{-form-errors} {
    margin-bottom: @_unitSpaceHalf;
    .errorStyle(@_errorColor);
    padding: @_unitSpaceHalf;
  }
  .@{-form-errors_title} {
    font-size: @fontSizeTitleErrors;
    font-weight: bold;
    margin: 0 0 5px;
    padding-bottom: 5px;
    .shadow(0px 1px 0px hsl(@errorHue, 65%, 90%));
    border-bottom: 1px solid hsl(@errorHue, 60%, 50%);
  }
  .@{-form-errors_list} {
    list-style: none;
    margin: 0;
  }
  .@{-form-errors_list_item} {

  }
  // трясущиеся инпуты
  .Input-shake() {
    #animation > .shake();
    .@{-input-shake} {
      .animation(shake, .7s, 0s, ease);
    }
  } // END .input-shake();

} // END inputs-errors();


// custom checkbox and radio button
.Checkbox-radio() {
  @checkRadioSize: 11px;
  @checkTickColor: lighten(@_textColor, 6%);
  @radioColor: lighten(@_textColor, 6%);

  @radioBorderColorDisabled: hsl(@_hue, 4%, 76%);
  @radioBgColorDisabled: hsl(@_hue, 4%, 80%);
  @checkDisabledTickColor: darken(@radioBgColorDisabled, 8%);

  :root {
    .@{-chosen_input} {
      .opacity(0);
      position: relative;
      z-index: 1;
      & + .@{-chosen-custom} {
        display:inline-block;
        position: absolute;
        margin: 4px 0 0 -@_unitSpace;
        cursor: pointer;
        .size(@checkRadioSize, @checkRadioSize);
        .inputNormal();
        &.@{-input--error} {
          .inputFocus(@_errorColor);
        }
      }
      &:hover + .@{-chosen-custom} {
        .border(@_inputBorderColorFocus);
      }
      &:focus + .@{-chosen-custom} {
        .inputFocus(@_inputBorderColorFocus);
      }
      &[disabled] + .@{-chosen-custom} {
        .inputDisabled();
        cursor: default;
      }
    }
    input[type="radio"].@{-chosen_input} + .@{-chosen-custom} {
      .round(50%);
    }
    input[type="checkbox"].@{-chosen_input}:checked + .@{-chosen-custom}:before,
    input[type="checkbox"].@{-chosen_input}:checked + .@{-chosen-custom}:after {
      content: "";
      display: block;
      position: absolute;
    }
    @tick_left: 1px;
    @tick_top: -1px;
    input[type="checkbox"].@{-chosen_input}:checked + .@{-chosen-custom}:before {
      .size(10px, 4px);
      .side(@tick_left, @tick_top);
      border-color: @checkTickColor;
      border-style: solid;
      border-width: 0px 0px 3px 3px;
      .round-bottom-left(2px);
      .rotate(-45deg);
    }
    @media screen and (-webkit-min-device-pixel-ratio:0) { // hack for chrome
      & input[type="checkbox"]:checked + .@{-chosen-custom}:before {
        .side( (@tick_left + 1) , (@tick_top - 1) );
      }
    } // END hack for chrome
    input[type="checkbox"].@{-chosen_input}:disabled:checked + .@{-chosen-custom}:before,
    input[type="checkbox"].@{-chosen_input}:disabled:checked + .@{-chosen-custom}:after {
      cursor: default;
      border-color: @checkDisabledTickColor;
    }

    input[type="radio"].@{-chosen_input}:checked + .@{-chosen-custom}:before,
    input[type="radio"].@{-chosen_input}:disabled:checked + .@{-chosen-custom}:before {
      content: "";
      display: inline-block;
      .size( (@checkRadioSize - 4) , (@checkRadioSize - 4) );
      position: absolute;
      margin-top: 1px;
      margin-left: 1px;
      .round(50%);
      .grad(@radioColor, 35%);
      .border(@radioColor);
      .shadow(inset 0px 0px 1px lighten(@radioColor, 100%));
    }
    input[type="radio"].@{-chosen_input}:disabled:checked + .@{-chosen-custom}:before {
      cursor: default;
      background: @radioBgColorDisabled;
      .border(@radioBorderColorDisabled);
    }
  }
} // END .checkbox-radio()

// custom select box
.Select(@arrowColor, @glowColor) {
  @selectArrowSize: 5px;
  @selectBgArrowHeight: (@_inputHeightFull - 2);
  @selectBgArrowWidth: ceil( (2 * @selectArrowSize + 2 * 5 + 3) );
  @innerReflex: (@_inputHeightFull / 2);

  .@{-select_custom-wrap} {
    position: relative;
    display:inline-block;
    vertical-align: top;
    & select {
      .opacity(0);
      position: relative;
      z-index: 1;
      padding-right:10px;
      & option {
        .opacity(1);
        border-bottom:1px solid #DDD;
        &:last-child {
          border-bottom: none;
        }
      }
      &:hover + .@{-select_custom} {
        .border(@_inputBorderColorFocus);
        &:before {
          #style > .btnHover(@_inputBorderColor, @glowColor, @innerReflex, false);
        }
      }
      &:focus + .@{-select_custom} {
        .inputFocus(@_inputBorderColorFocus);
        &:before {
          #style > .btnActive(@_inputBorderColor, false);
        }
      }
    }
  }
  .@{-select_custom} {
    position: absolute;
    left: 0px;
    top: 0px;
    .box-sizing();
    min-height: @_inputHeightFull;
    width: 100%;
    overflow: visible;
    white-space: nowrap;
    padding-right: (@selectBgArrowWidth + 8);
    font-style: normal;
    &:before {
      content: "";

      display: block;
      position: absolute;
      right: 0px;
      top: 0px;
      width: @selectBgArrowWidth;
      height: @selectBgArrowHeight;

      .round-custom(0, @_round, @_round, 0);
      #style > .btnNormal(@_inputBorderColor, @_textColor, @innerReflex, false);
    }
    &:after {
      content: "";
      position: absolute;
      right: 6px;
      top: (@_inputHeightFull / 2 - @selectArrowSize / 2);
      width: 0px;
      height: 0px;
      border-width: @selectArrowSize;
      border-style: solid;
      border-color: @arrowColor transparent transparent;
    }
  }
} // END select()

// custom file input
.Input-file(@inputFileWidthMin, @inputFileWidthMax) {

  @fileBtnWidth: 104px;
  @fileBtnPadding: @_inputPaddingTop 10px @_inputPaddingBottom;

  .@{-input-file_custom} {
    position: relative;
    display: inline-block;
    vertical-align: top;
    padding-right: (@fileBtnWidth + 8);
    font-style: normal;
    white-space: nowrap;
    min-width: @inputFileWidthMin;
    width: auto;
    max-width: @inputFileWidthMax;
    overflow: hidden;
    &:after {
      content: "выбрать файл";
      cursor: default;

      display: block;
      position: absolute;
      top: 0px;
      right: 0px;

      line-height: @_inputHeight;
      padding: @fileBtnPadding;

      .one-pixel-text-shadow(hsl(0, 0%, 88%));
      .round-custom(0, @_round, @_round, 0);
      #style > .btnNormal(@_inputBorderColor, @_textColor, (@_inputHeightFull / 2), false);
    }
  }
  .@{-input-file} {
    .opacity(0);
    position: absolute;
    left:-9999px;

    &:focus + .@{-input-file_custom} {
      .inputFocus(@_inputBorderColorFocus);
    }
    &:active + .@{-input-file_custom}:after {
      #style > .btnActive(@_inputBorderColor, false);
    }
  }
} // END .input-file()
// -----------------------------------------
}}

